/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.opencb.biodata.external.gel_participant_6_2_0;

import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.annotation.JsonNaming;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)
public class DummyTest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DummyTest\",\"namespace\":\"org.dummy.avro\",\"fields\":[{\"name\":\"my_id\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"DummyInnerString\",\"fields\":[{\"name\":\"myId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.util.List<DummyInnerString> my_id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public DummyTest() {}

  /**
   * All-args constructor.
   */
  public DummyTest(java.util.List<DummyInnerString> my_id) {
    this.my_id = my_id;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return my_id;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: my_id = (java.util.List<DummyInnerString>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'my_id' field.
   */
  public java.util.List<DummyInnerString> getMyId() {
    return my_id;
  }

  /**
   * Sets the value of the 'my_id' field.
   * @param value the value to set.
   */
  public void setMyId(java.util.List<DummyInnerString> value) {
    this.my_id = value;
  }

  /** Creates a new DummyTest RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new DummyTest RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new DummyTest RecordBuilder by copying an existing DummyTest instance */
  public static Builder newBuilder(DummyTest other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for DummyTest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DummyTest>
    implements org.apache.avro.data.RecordBuilder<DummyTest> {

    private java.util.List<DummyInnerString> my_id;

    /** Creates a new Builder */
    private Builder() {
      super(DummyTest.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.my_id)) {
        this.my_id = data().deepCopy(fields()[0].schema(), other.my_id);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing DummyTest instance */
    private Builder(DummyTest other) {
            super(DummyTest.SCHEMA$);
      if (isValidValue(fields()[0], other.my_id)) {
        this.my_id = data().deepCopy(fields()[0].schema(), other.my_id);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'my_id' field */
    public java.util.List<DummyInnerString> getMyId() {
      return my_id;
    }
    
    /** Sets the value of the 'my_id' field */
    public Builder setMyId(java.util.List<DummyInnerString> value) {
      validate(fields()[0], value);
      this.my_id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'my_id' field has been set */
    public boolean hasMyId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'my_id' field */
    public Builder clearMyId() {
      my_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public DummyTest build() {
      try {
        DummyTest record = new DummyTest();
        record.my_id = fieldSetFlags()[0] ? this.my_id : (java.util.List<DummyInnerString>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
