/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.opencb.biodata.external.gel_participant_6_2_0;

import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.annotation.JsonNaming;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)
public class DummyFile extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DummyFile\",\"namespace\":\"org.dummy.avro\",\"fields\":[{\"name\":\"url\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"file_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"file_type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private String url;
   private String file_name;
   private String file_type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public DummyFile() {}

  /**
   * All-args constructor.
   */
  public DummyFile(String url, String file_name, String file_type) {
    this.url = url;
    this.file_name = file_name;
    this.file_type = file_type;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return url;
    case 1: return file_name;
    case 2: return file_type;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: url = (String)value$; break;
    case 1: file_name = (String)value$; break;
    case 2: file_type = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'url' field.
   */
  public String getUrl() {
    return url;
  }

  /**
   * Sets the value of the 'url' field.
   * @param value the value to set.
   */
  public void setUrl(String value) {
    this.url = value;
  }

  /**
   * Gets the value of the 'file_name' field.
   */
  public String getFileName() {
    return file_name;
  }

  /**
   * Sets the value of the 'file_name' field.
   * @param value the value to set.
   */
  public void setFileName(String value) {
    this.file_name = value;
  }

  /**
   * Gets the value of the 'file_type' field.
   */
  public String getFileType() {
    return file_type;
  }

  /**
   * Sets the value of the 'file_type' field.
   * @param value the value to set.
   */
  public void setFileType(String value) {
    this.file_type = value;
  }

  /** Creates a new DummyFile RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new DummyFile RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new DummyFile RecordBuilder by copying an existing DummyFile instance */
  public static Builder newBuilder(DummyFile other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for DummyFile instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DummyFile>
    implements org.apache.avro.data.RecordBuilder<DummyFile> {

    private String url;
    private String file_name;
    private String file_type;

    /** Creates a new Builder */
    private Builder() {
      super(DummyFile.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.url)) {
        this.url = data().deepCopy(fields()[0].schema(), other.url);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.file_name)) {
        this.file_name = data().deepCopy(fields()[1].schema(), other.file_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.file_type)) {
        this.file_type = data().deepCopy(fields()[2].schema(), other.file_type);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing DummyFile instance */
    private Builder(DummyFile other) {
            super(DummyFile.SCHEMA$);
      if (isValidValue(fields()[0], other.url)) {
        this.url = data().deepCopy(fields()[0].schema(), other.url);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.file_name)) {
        this.file_name = data().deepCopy(fields()[1].schema(), other.file_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.file_type)) {
        this.file_type = data().deepCopy(fields()[2].schema(), other.file_type);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'url' field */
    public String getUrl() {
      return url;
    }
    
    /** Sets the value of the 'url' field */
    public Builder setUrl(String value) {
      validate(fields()[0], value);
      this.url = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'url' field has been set */
    public boolean hasUrl() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'url' field */
    public Builder clearUrl() {
      url = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'file_name' field */
    public String getFileName() {
      return file_name;
    }
    
    /** Sets the value of the 'file_name' field */
    public Builder setFileName(String value) {
      validate(fields()[1], value);
      this.file_name = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'file_name' field has been set */
    public boolean hasFileName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'file_name' field */
    public Builder clearFileName() {
      file_name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'file_type' field */
    public String getFileType() {
      return file_type;
    }
    
    /** Sets the value of the 'file_type' field */
    public Builder setFileType(String value) {
      validate(fields()[2], value);
      this.file_type = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'file_type' field has been set */
    public boolean hasFileType() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'file_type' field */
    public Builder clearFileType() {
      file_type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public DummyFile build() {
      try {
        DummyFile record = new DummyFile();
        record.url = fieldSetFlags()[0] ? this.url : (String) defaultValue(fields()[0]);
        record.file_name = fieldSetFlags()[1] ? this.file_name : (String) defaultValue(fields()[1]);
        record.file_type = fieldSetFlags()[2] ? this.file_type : (String) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
