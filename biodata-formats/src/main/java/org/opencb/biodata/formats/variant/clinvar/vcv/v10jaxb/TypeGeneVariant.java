//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.03.15 at 01:36:40 AM GMT 
//


package org.opencb.biodata.formats.variant.clinvar.vcv.v10jaxb;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for typeGeneVariant.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="typeGeneVariant">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="variant within gene"/>
 *     &lt;enumeration value="gene overlapped by variant"/>
 *     &lt;enumeration value="variant near gene, upstream"/>
 *     &lt;enumeration value="variant near gene, downstream"/>
 *     &lt;enumeration value="asserted, but not computed"/>
 *     &lt;enumeration value="within multiple genes by overlap"/>
 *     &lt;enumeration value="within single gene"/>
 *     &lt;enumeration value="genes overlapped by variant"/>
 *     &lt;enumeration value="near gene, downstream"/>
 *     &lt;enumeration value="near gene, upstream"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "typeGeneVariant")
@XmlEnum
public enum TypeGeneVariant {

    @XmlEnumValue("variant within gene")
    VARIANT_WITHIN_GENE("variant within gene"),
    @XmlEnumValue("gene overlapped by variant")
    GENE_OVERLAPPED_BY_VARIANT("gene overlapped by variant"),
    @XmlEnumValue("variant near gene, upstream")
    VARIANT_NEAR_GENE_UPSTREAM("variant near gene, upstream"),
    @XmlEnumValue("variant near gene, downstream")
    VARIANT_NEAR_GENE_DOWNSTREAM("variant near gene, downstream"),
    @XmlEnumValue("asserted, but not computed")
    ASSERTED_BUT_NOT_COMPUTED("asserted, but not computed"),
    @XmlEnumValue("within multiple genes by overlap")
    WITHIN_MULTIPLE_GENES_BY_OVERLAP("within multiple genes by overlap"),
    @XmlEnumValue("within single gene")
    WITHIN_SINGLE_GENE("within single gene"),
    @XmlEnumValue("genes overlapped by variant")
    GENES_OVERLAPPED_BY_VARIANT("genes overlapped by variant"),
    @XmlEnumValue("near gene, downstream")
    NEAR_GENE_DOWNSTREAM("near gene, downstream"),
    @XmlEnumValue("near gene, upstream")
    NEAR_GENE_UPSTREAM("near gene, upstream");
    private final String value;

    TypeGeneVariant(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TypeGeneVariant fromValue(String v) {
        for (TypeGeneVariant c: TypeGeneVariant.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
