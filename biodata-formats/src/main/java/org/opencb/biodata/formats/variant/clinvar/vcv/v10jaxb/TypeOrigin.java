//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.03.15 at 01:36:40 AM GMT 
//


package org.opencb.biodata.formats.variant.clinvar.vcv.v10jaxb;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for typeOrigin.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="typeOrigin">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="germline"/>
 *     &lt;enumeration value="somatic"/>
 *     &lt;enumeration value="de novo"/>
 *     &lt;enumeration value="not provided"/>
 *     &lt;enumeration value="inherited"/>
 *     &lt;enumeration value="maternal"/>
 *     &lt;enumeration value="paternal"/>
 *     &lt;enumeration value="uniparental"/>
 *     &lt;enumeration value="biparental"/>
 *     &lt;enumeration value="not-reported"/>
 *     &lt;enumeration value="tested-inconclusive"/>
 *     &lt;enumeration value="unknown"/>
 *     &lt;enumeration value="not applicable"/>
 *     &lt;enumeration value="experimentally generated"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "typeOrigin")
@XmlEnum
public enum TypeOrigin {

    @XmlEnumValue("germline")
    GERMLINE("germline"),
    @XmlEnumValue("somatic")
    SOMATIC("somatic"),
    @XmlEnumValue("de novo")
    DE_NOVO("de novo"),
    @XmlEnumValue("not provided")
    NOT_PROVIDED("not provided"),
    @XmlEnumValue("inherited")
    INHERITED("inherited"),
    @XmlEnumValue("maternal")
    MATERNAL("maternal"),
    @XmlEnumValue("paternal")
    PATERNAL("paternal"),
    @XmlEnumValue("uniparental")
    UNIPARENTAL("uniparental"),
    @XmlEnumValue("biparental")
    BIPARENTAL("biparental"),
    @XmlEnumValue("not-reported")
    NOT_REPORTED("not-reported"),
    @XmlEnumValue("tested-inconclusive")
    TESTED_INCONCLUSIVE("tested-inconclusive"),
    @XmlEnumValue("unknown")
    UNKNOWN("unknown"),
    @XmlEnumValue("not applicable")
    NOT_APPLICABLE("not applicable"),
    @XmlEnumValue("experimentally generated")
    EXPERIMENTALLY_GENERATED("experimentally generated");
    private final String value;

    TypeOrigin(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TypeOrigin fromValue(String v) {
        for (TypeOrigin c: TypeOrigin.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
